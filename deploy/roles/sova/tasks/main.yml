---
- name: Install required packages
  package:
    name: '{{ item }}'
    state: present
  with_items:
    - docker
    - git
    - curl
  become: yes

- name: Clone sova repo
  git:
    repo: '{{ git_repo }}'
    dest: '{{ git_repo_path }}'
    force: yes

- name: Download pip
  get_url:
    url: https://bootstrap.pypa.io/get-pip.py
    dest: /tmp/get-pip.py

- name: Install pip if not installed
  shell: >
    command -v pip
    && echo "No action is needed"
    || /usr/bin/python /tmp/get-pip.py
  become: yes
  register: pip_exists
  changed_when: "'No action is needed' not in pip_exists.stdout"

- name: Install python packages with pip
  pip:
    name:
      - docker-compose
      - docker
      - requests
  become: yes

- name: Find out docker group name
  shell: grep docker /etc/group | cut -d":" -f1 | head -1
  register: docker_group
  changed_when: false

- name: Check if user is in docker group
  command: groups
  register: user_groups
  changed_when: false

- when: "docker_group.stdout not in user_groups.stdout"
  block:

  - name: Add user to docker group
    user:
      name: '{{ ansible_user }}'
      groups: '{{ docker_group.stdout }}'
      append: yes
    become: yes
    register: groupadd

  # Use this dirty hack to relogin the user
  # https://github.com/ansible/ansible-modules-core/issues/921
  - name: Kill SSH to relogin the user for changed group
    shell: sleep 1; pkill -u {{ ansible_user }} sshd
    async: 3
    poll: 2
    when: groupadd|changed

- name: Create docker configuration file
  copy:
    content: |
      {
      "live-restore": true,
      "group": "{{ docker_group.stdout }}",
      }
    dest: /etc/docker/daemon.json
  become: yes
  register: docker_config

- name: Reload docker if config was changed
  service:
    name: docker
    state: reloaded
  become: yes
  when: docker_config|changed

- name: Start and enable docker
  service:
    name: docker
    state: started
    enabled: yes
  become: yes

- name: Create redeploying script
  template:
    src: redeploy.sh.j2
    dest: '{{ redeploy_script }}'
    mode: a+x

- name: Create mount point for docker volume
  file:
    state: directory
    path: '{{ mount_point }}'

- name: Create logs dir in mount point of docker volume
  file:
    state: directory
    path: '{{ mount_point }}/logs'

- name: Download docker-hook
  get_url:
    url: '{{ docker_hook_url }}'
    dest: '{{ docker_hook }}'
    mode: a+x

- name: Check if token exists on remote machine
  stat:
    path: '{{ remote_token_path }}'
  register: token_stat

- when: token_stat.stat.exists
  block:

  - name: Show auth token
    no_log: true
    command: "cat {{ remote_token_path }}"
    register: token
    changed_when: false

  - name: Set auth token
    no_log: true
    set_fact:
      auth_token: "{{ token.stdout }}"

- when: auth_token is not defined
  block:

  - name: Check if token exists on local machine
    stat:
      path: '{{ local_token_path }}'
    register: token_stat
    failed_when: not token_stat.stat.exists
    delegate_to: localhost

  - name: Get auth token
    no_log: true
    set_fact:
      auth_token: "{{ lookup('pipe', 'cat {{ local_token_path }}') }}"

- name: Save token on remote machine
  no_log: true
  copy:
    src: '{{ local_token_path }}'
    dest: '{{ remote_token_path }}'
  when: save_token_on_remote|bool

- name: Check if Gerrit SSH key presents on remote host
  stat:
    path: '{{ mount_point }}/robi_id_rsa'
  register: ssh_remote_stat

- when: not ssh_remote_stat.stat.exists
  block:

  - name: Check if SSH private key for Gerrit exists on local machine
    stat:
      path: '{{ gerrit_ssh_key }}'
    register: ssh_stat
    failed_when: not ssh_stat.stat.exists
    delegate_to: localhost

  - name: Get Gerrit SSH private key
    copy:
      src: '{{ gerrit_ssh_key }}'
      dest: '{{ mount_point }}/robi_id_rsa'

- name: Create docker-hook service
  template:
    src: docker-hook.service.j2
    dest: /etc/systemd/system/docker-hook.service
  become: yes
  register: dockerhook

- name: Reload systemd files including changes in docker-hook
  systemd:
    name: docker-hook
    state: restarted
    daemon_reload: yes
    enabled: yes
  become: yes
  when: dockerhook|changed

- name: Start docker-hook service
  service:
    name: docker-hook.service
    state: started
    enabled: yes
  become: yes

- name: Create docker-compose from template
  template:
    src: docker-compose.yaml.j2
    dest: '{{ docker_compose_file }}'

- name: Run docker-compose from repo
  docker_service:
    project_src: '{{ work_dir }}'
    state: present
    pull: yes

- name: Test if deployment was successful
  shell: |
    set -e
    set -o pipefail
    TEST=$(date +%s)
    curl -X POST "http://localhost:{{ hook_port }}/${TEST}"
    grep "${TEST}" {{ docker_hook_log }} | grep 401
    docker ps | grep {{ docker_container_name }}
    curl --fail http://localhost > /dev/null
  changed_when: false
